PS C:\Users\sneha\OneDrive\Desktop\aws\ghost> terraform init

Initializing the backend...

Initializing provider plugins...
- Finding kreuzwerker/docker versions matching "~> 2.13.0"...
- Installing kreuzwerker/docker v2.13.0...
- Installed kreuzwerker/docker v2.13.0 (self-signed, key ID 24E54F214569A8A5)
Partner and community providers are signed by their developers.
If you'd like to know more about provider signing, you can read about it here:
https://www.terraform.io/docs/cli/plugins/signing.html

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

PS C:\Users\sneha\OneDrive\Desktop\aws\ghost> terraform plan -out=tfplan -input=false

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:        
  + create

Terraform will perform the following actions:

  # docker_container.ghost_container will be created
  + resource "docker_container" "ghost_container" {
      + attach           = false
      + bridge           = (known after apply)
      + command          = (known after apply)
      + container_logs   = (known after apply)
      + entrypoint       = (known after apply)
      + env              = (known after apply)
      + exit_code        = (known after apply)
      + gateway          = (known after apply)
      + hostname         = (known after apply)
      + id               = (known after apply)
      + image            = (known after apply)
      + init             = (known after apply)
      + ip_address       = (known after apply)
      + ip_prefix_length = (known after apply)
      + ipc_mode         = (known after apply)
      + log_driver       = "json-file"
      + logs             = false
      + must_run         = true
      + name             = "ghost_blog1"
      + network_data     = (known after apply)
      + read_only        = false
      + remove_volumes   = true
      + restart          = "no"
      + rm               = false
      + security_opts    = (known after apply)
      + shm_size         = (known after apply)
      + start            = true
      + stdin_open       = false
      + tty              = false

      + healthcheck {
          + interval     = (known after apply)
          + retries      = (known after apply)
          + start_period = (known after apply)
          + test         = (known after apply)
          + timeout      = (known after apply)
        }

      + labels {
          + label = (known after apply)
          + value = (known after apply)
        }

      + ports {
          + external = 80
          + internal = 2368
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

  # docker_image.ghost_image will be created
  + resource "docker_image" "ghost_image" {
      + latest      = (known after apply)
      + name        = "ghost:latest"
      + output      = (known after apply)
      + repo_digest = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + ghost_container_ip_address = (known after apply)
  + ghost_container_name       = "ghost_blog1"

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
PS C:\Users\sneha\OneDrive\Desktop\aws\ghost> terraform apply -input=false tfplan
docker_image.ghost_image: Creating...
docker_image.ghost_image: Still creating... [10s elapsed]
docker_image.ghost_image: Still creating... [21s elapsed]
docker_image.ghost_image: Still creating... [31s elapsed]
docker_image.ghost_image: Still creating... [41s elapsed]
docker_image.ghost_image: Still creating... [51s elapsed]
docker_image.ghost_image: Still creating... [1m1s elapsed]
docker_image.ghost_image: Still creating... [1m11s elapsed]
docker_image.ghost_image: Still creating... [1m21s elapsed]
docker_image.ghost_image: Still creating... [1m31s elapsed]
docker_image.ghost_image: Creation complete after 11m44s [id=sha256:c2abe8cc4aa911a1756e1d8097d3a4db3e5560d3ad0f3183edf7f53eacf476aeghost:latest]
docker_container.ghost_container: Creating...
docker_container.ghost_container: Still creating... [10s elapsed]
docker_container.ghost_container: Still creating... [20s elapsed]
docker_container.ghost_container: Still creating... [30s elapsed]
docker_container.ghost_container: Still creating... [41s elapsed]
docker_container.ghost_container: Still creating... [51s elapsed]
docker_container.ghost_container: Still creating... [1m41s elapsed]
docker_container.ghost_container: Creation complete after 1m42s [id=71daef4a5f56537949cf9f62e11cb9f0fa3cd5f00308449b4c61462c860627a7]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

Outputs:

ghost_container_ip_address = "172.17.0.2"
ghost_container_name = "ghost_blog1"