PS C:\Users\sneha\OneDrive\Desktop\aws\mysql> terraform init    

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of kreuzwerker/docker from the dependency lock file
- Using previously-installed kreuzwerker/docker v2.13.0


You may now begin working with Terraform. Try running "terraform plan" to see
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

PS C:\Users\sneha\OneDrive\Desktop\aws\mysql> terraform validate
Success! The configuration is valid.

PS C:\Users\sneha\OneDrive\Desktop\aws\mysql> terraform plan    
╷
│
│   on main.tf line 17, in resource "docker_container" "mysql_container":
│   17:   image = "${docker_image.mysql_image}"
│     ├────────────────
│     │ docker_image.mysql_image is object with 10 attributes
│
│ Inappropriate value for attribute "image": string required.
╵
PS C:\Users\sneha\OneDrive\Desktop\aws\mysql> terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:        
  + create

Terraform will perform the following actions:

  # docker_container.mysql_container will be created
  + resource "docker_container" "mysql_container" {
      + attach           = false
      + bridge           = (known after apply)
      + command          = (known after apply)
      + container_logs   = (known after apply)
      + entrypoint       = (known after apply)
      + env              = [
          + "MYSQL_ROOT_PASSWORD=P4sSw0rd0!",
        ]
      + exit_code        = (known after apply)
      + gateway          = (known after apply)
      + hostname         = (known after apply)
      + id               = (known after apply)
      + image            = "mysql:5.7"
      + init             = (known after apply)
      + ip_address       = (known after apply)
      + ip_prefix_length = (known after apply)
      + ipc_mode         = (known after apply)
      + log_driver       = "json-file"
      + logs             = false
      + must_run         = true
      + name             = "mysql"
      + network_data     = (known after apply)
      + read_only        = false
      + remove_volumes   = true
      + restart          = "no"
      + rm               = false
      + security_opts    = (known after apply)
      + shm_size         = (known after apply)
      + start            = true
      + stdin_open       = false
      + tty              = false

      + healthcheck {
          + interval     = (known after apply)
          + retries      = (known after apply)
          + start_period = (known after apply)
          + test         = (known after apply)
          + timeout      = (known after apply)
        }

      + labels {
          + label = (known after apply)
          + value = (known after apply)
        }

      + networks_advanced {
          + aliases = []
          + name    = "mysql_internal_network"
        }

      + volumes {
          + container_path = "/var/lib/mysql"
          + volume_name    = "mysql_data"
        }
    }

  # docker_image.mysql_image will be created
  + resource "docker_image" "mysql_image" {
      + id          = (known after apply)
      + latest      = (known after apply)
      + name        = "mysql:5.7"
      + output      = (known after apply)
      + repo_digest = (known after apply)
    }

  # docker_network.private_bridge_network will be created
  + resource "docker_network" "private_bridge_network" {
      + driver      = "bridge"
      + id          = (known after apply)
      + internal    = true
      + ipam_driver = "default"
      + name        = "mysql_internal_network"
      + options     = (known after apply)
      + scope       = (known after apply)

      + ipam_config {
          + aux_address = (known after apply)
          + gateway     = (known after apply)
          + ip_range    = (known after apply)
          + subnet      = (known after apply)
        }
    }

  # docker_volume.mysql_data_volume will be created
  + resource "docker_volume" "mysql_data_volume" {
      + driver     = (known after apply)
      + id         = (known after apply)
      + mountpoint = (known after apply)
    }

Plan: 4 to add, 0 to change, 0 to destroy.

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply"   
now.
PS C:\Users\sneha\OneDrive\Desktop\aws\mysql> terraform apply --auto-approve

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:        
  + create

Terraform will perform the following actions:

  # docker_container.mysql_container will be created
  + resource "docker_container" "mysql_container" {
      + attach           = false
      + bridge           = (known after apply)
      + command          = (known after apply)
      + container_logs   = (known after apply)
      + entrypoint       = (known after apply)
      + env              = [
          + "MYSQL_ROOT_PASSWORD=P4sSw0rd0!",
        ]
      + exit_code        = (known after apply)
      + gateway          = (known after apply)
      + hostname         = (known after apply)
      + id               = (known after apply)
      + image            = "mysql:5.7"
      + init             = (known after apply)
      + ip_address       = (known after apply)
      + ip_prefix_length = (known after apply)
      + ipc_mode         = (known after apply)
      + log_driver       = "json-file"
      + logs             = false
      + must_run         = true
      + name             = "mysql"
      + network_data     = (known after apply)
      + read_only        = false
      + remove_volumes   = true
      + restart          = "no"
      + rm               = false
      + security_opts    = (known after apply)
      + shm_size         = (known after apply)
      + start            = true
      + stdin_open       = false
      + tty              = false

      + healthcheck {
          + interval     = (known after apply)
          + retries      = (known after apply)
          + start_period = (known after apply)
          + test         = (known after apply)
          + timeout      = (known after apply)
        }

      + labels {
          + label = (known after apply)
          + value = (known after apply)
        }

      + networks_advanced {
          + aliases = []
          + name    = "mysql_internal_network"
        }

      + volumes {
          + container_path = "/var/lib/mysql"
          + volume_name    = "mysql_data"
        }
    }

  # docker_image.mysql_image will be created
  + resource "docker_image" "mysql_image" {
      + id          = (known after apply)
      + latest      = (known after apply)
      + name        = "mysql:5.7"
      + output      = (known after apply)
      + repo_digest = (known after apply)
    }

  # docker_network.private_bridge_network will be created
  + resource "docker_network" "private_bridge_network" {
      + driver      = "bridge"
      + id          = (known after apply)
      + internal    = true
      + ipam_driver = "default"
      + name        = "mysql_internal_network"
      + options     = (known after apply)
      + scope       = (known after apply)

      + ipam_config {
          + aux_address = (known after apply)
          + gateway     = (known after apply)
          + ip_range    = (known after apply)
          + subnet      = (known after apply)
        }
    }

  # docker_volume.mysql_data_volume will be created
  + resource "docker_volume" "mysql_data_volume" {
      + driver     = (known after apply)
      + id         = (known after apply)
      + mountpoint = (known after apply)
      + name       = "mysql_data"
    }

Plan: 4 to add, 0 to change, 0 to destroy.
docker_volume.mysql_data_volume: Creating...
docker_image.mysql_image: Creating...
docker_network.private_bridge_network: Creating...
docker_volume.mysql_data_volume: Creation complete after 8s [id=mysql_data]
docker_network.private_bridge_network: Still creating... [10s elapsed]
docker_image.mysql_image: Still creating... [10s elapsed]
docker_image.mysql_image: Still creating... [20s elapsed]
docker_network.private_bridge_network: Still creating... [20s elapsed]
docker_network.private_bridge_network: Creation complete after 21s [id=e1e82ec4d426a2b1ef70c63656e246e8151b99493e289b28faee07a655a89e49]
docker_image.mysql_image: Still creating... [30s elapsed]
docker_image.mysql_image: Still creating... [40s elapsed]
docker_image.mysql_image: Still creating... [50s elapsed]
docker_image.mysql_image: Still creating... [1m0s elapsed]
docker_image.mysql_image: Still creating... [1m10s elapsed]
docker_image.mysql_image: Still creating... [1m20s elapsed]
docker_image.mysql_image: Still creating... [1m30s elapsed]
docker_image.mysql_image: Still creating... [1m40s elapsed]
docker_image.mysql_image: Still creating... [1m50s elapsed]
docker_image.mysql_image: Still creating... [2m0s elapsed]
docker_image.mysql_image: Creation complete after 2m9s [id=sha256:1d7aba9171693947d53f474014821972bf25d72b7d143ce4af4c8d8484623417mysql:5.7]
docker_container.mysql_container: Creating...
docker_container.mysql_container: Still creating... [10s elapsed]
docker_container.mysql_container: Still creating... [20s elapsed]
docker_container.mysql_container: Still creating... [30s elapsed]
docker_container.mysql_container: Still creating... [40s elapsed]
docker_container.mysql_container: Creation complete after 42s [id=d8bcd0cee52c4ee5e146d4f7096be61c502a6f4d1e1ebca1bbd1e2dd96d2446b]

Apply complete! Resources: 4 added, 0 changed, 0 destroyed.